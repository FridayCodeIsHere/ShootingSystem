//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.2.0
//     from Assets/Controls/UserControl.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @UserControl : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @UserControl()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""UserControl"",
    ""maps"": [
        {
            ""name"": ""PC"",
            ""id"": ""64eb2e76-543a-46da-8148-cfae27f3bca2"",
            ""actions"": [
                {
                    ""name"": ""MouseWheel"",
                    ""type"": ""Value"",
                    ""id"": ""94e4e5ed-37f4-4873-a4b1-ad02b506ca0f"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""LeftClick"",
                    ""type"": ""Button"",
                    ""id"": ""60b3a6ab-33c1-46c5-a664-ee4f51c1773b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MousePosition"",
                    ""type"": ""Value"",
                    ""id"": ""32ced4fc-37fa-4f33-b619-dcf74c5dd709"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c5f96a94-04b0-4022-bee0-747172c9313c"",
                    ""path"": ""<Mouse>/scroll/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseWheel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""af2976d2-66a7-4857-9400-5bca71b5cd00"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b6c9162f-7ffd-4c11-bc88-0d49ffdae149"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MousePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Android"",
            ""id"": ""f2437b1d-32a7-4d7a-943a-c8801dbeeb9a"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""dde0fcaf-f31c-4c7b-84a0-e554d56e6338"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""051f7ef8-e310-4259-a16c-f1b5ed8ee535"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PC
        m_PC = asset.FindActionMap("PC", throwIfNotFound: true);
        m_PC_MouseWheel = m_PC.FindAction("MouseWheel", throwIfNotFound: true);
        m_PC_LeftClick = m_PC.FindAction("LeftClick", throwIfNotFound: true);
        m_PC_MousePosition = m_PC.FindAction("MousePosition", throwIfNotFound: true);
        // Android
        m_Android = asset.FindActionMap("Android", throwIfNotFound: true);
        m_Android_Newaction = m_Android.FindAction("New action", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PC
    private readonly InputActionMap m_PC;
    private IPCActions m_PCActionsCallbackInterface;
    private readonly InputAction m_PC_MouseWheel;
    private readonly InputAction m_PC_LeftClick;
    private readonly InputAction m_PC_MousePosition;
    public struct PCActions
    {
        private @UserControl m_Wrapper;
        public PCActions(@UserControl wrapper) { m_Wrapper = wrapper; }
        public InputAction @MouseWheel => m_Wrapper.m_PC_MouseWheel;
        public InputAction @LeftClick => m_Wrapper.m_PC_LeftClick;
        public InputAction @MousePosition => m_Wrapper.m_PC_MousePosition;
        public InputActionMap Get() { return m_Wrapper.m_PC; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PCActions set) { return set.Get(); }
        public void SetCallbacks(IPCActions instance)
        {
            if (m_Wrapper.m_PCActionsCallbackInterface != null)
            {
                @MouseWheel.started -= m_Wrapper.m_PCActionsCallbackInterface.OnMouseWheel;
                @MouseWheel.performed -= m_Wrapper.m_PCActionsCallbackInterface.OnMouseWheel;
                @MouseWheel.canceled -= m_Wrapper.m_PCActionsCallbackInterface.OnMouseWheel;
                @LeftClick.started -= m_Wrapper.m_PCActionsCallbackInterface.OnLeftClick;
                @LeftClick.performed -= m_Wrapper.m_PCActionsCallbackInterface.OnLeftClick;
                @LeftClick.canceled -= m_Wrapper.m_PCActionsCallbackInterface.OnLeftClick;
                @MousePosition.started -= m_Wrapper.m_PCActionsCallbackInterface.OnMousePosition;
                @MousePosition.performed -= m_Wrapper.m_PCActionsCallbackInterface.OnMousePosition;
                @MousePosition.canceled -= m_Wrapper.m_PCActionsCallbackInterface.OnMousePosition;
            }
            m_Wrapper.m_PCActionsCallbackInterface = instance;
            if (instance != null)
            {
                @MouseWheel.started += instance.OnMouseWheel;
                @MouseWheel.performed += instance.OnMouseWheel;
                @MouseWheel.canceled += instance.OnMouseWheel;
                @LeftClick.started += instance.OnLeftClick;
                @LeftClick.performed += instance.OnLeftClick;
                @LeftClick.canceled += instance.OnLeftClick;
                @MousePosition.started += instance.OnMousePosition;
                @MousePosition.performed += instance.OnMousePosition;
                @MousePosition.canceled += instance.OnMousePosition;
            }
        }
    }
    public PCActions @PC => new PCActions(this);

    // Android
    private readonly InputActionMap m_Android;
    private IAndroidActions m_AndroidActionsCallbackInterface;
    private readonly InputAction m_Android_Newaction;
    public struct AndroidActions
    {
        private @UserControl m_Wrapper;
        public AndroidActions(@UserControl wrapper) { m_Wrapper = wrapper; }
        public InputAction @Newaction => m_Wrapper.m_Android_Newaction;
        public InputActionMap Get() { return m_Wrapper.m_Android; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(AndroidActions set) { return set.Get(); }
        public void SetCallbacks(IAndroidActions instance)
        {
            if (m_Wrapper.m_AndroidActionsCallbackInterface != null)
            {
                @Newaction.started -= m_Wrapper.m_AndroidActionsCallbackInterface.OnNewaction;
                @Newaction.performed -= m_Wrapper.m_AndroidActionsCallbackInterface.OnNewaction;
                @Newaction.canceled -= m_Wrapper.m_AndroidActionsCallbackInterface.OnNewaction;
            }
            m_Wrapper.m_AndroidActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Newaction.started += instance.OnNewaction;
                @Newaction.performed += instance.OnNewaction;
                @Newaction.canceled += instance.OnNewaction;
            }
        }
    }
    public AndroidActions @Android => new AndroidActions(this);
    public interface IPCActions
    {
        void OnMouseWheel(InputAction.CallbackContext context);
        void OnLeftClick(InputAction.CallbackContext context);
        void OnMousePosition(InputAction.CallbackContext context);
    }
    public interface IAndroidActions
    {
        void OnNewaction(InputAction.CallbackContext context);
    }
}
